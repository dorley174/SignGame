name: Check Project Structure and Lint

on:
  push:
    branches:
      - DevOps
  pull_request:
    branches:
      - DevOps

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for level folder
        run: |
          if [ -d "Assets" ]; then
            echo "‚úÖ 'Assets' folder found!"
            if [ -d "Assets/Scenes" ]; then
              echo "‚úÖ 'Assets/Scenes' folder found!"
            else
              echo "‚ùå 'Assets/Scenes' folder is missing!"
              exit 1
            fi
          else
            echo "‚ùå 'Assets' folder is missing!"
            exit 1
          fi

      - name: Check for menu and level scenes
        run: |
          echo "üîç Searching start menu scene..."
          if [ -f "Assets/Scenes/MainMenuScene.unity" ]; then
            echo "‚úÖ 'MainMenuScene.unity' found"
          else
            echo "‚ùå Start menu 'MainMenuScene.unity' is missing!"
          fi
          echo "üîç Searching for level files..."
          matches=$(find Assets/Scenes -type f -regextype posix-extended -regex ".*/Level[A-Z][a-zA-Z]{0,9}[0-9]{3}\.unity")
          if [ -n "$matches" ]; then
            echo "‚úÖ Found level files:"
            echo "$matches"
          else
            echo "‚ö†Ô∏è No matching level files found"
          fi

  code-lint:
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dotnet-format tool
        run: dotnet tool install -g dotnet-format

      - name: Run dotnet-format and calculate score
        run: |
          export PATH="$PATH:$HOME/.dotnet/tools"
          echo "üîç Running dotnet-format analysis..."

          output=$(dotnet format --verify-no-changes --severity info 2>&1 || true)
          echo "$output"

          issues=$(echo "$output" | grep -E 'formatted|\[info\]' | wc -l)
          echo "‚ö†Ô∏è Found $issues formatting issues"

          score=$(echo "scale=1; 10 - ($issues / 5)" | bc)
          score=$(echo "$score" | awk '{ if ($1 < 0) print 0; else print }')

          echo "üìä Code style score: $score/10"

          if (( $(echo "$score < 3" | bc -l) )); then
            echo "‚ùå Code style too poor"
            exit 1
          fi

